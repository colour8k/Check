/**\n * API utility functions for fetching data\n */\n\n// Type definitions for family data\nexport interface Person {\n  id: string;\n  firstName: string;\n  lastName: string;\n  middleName?: string;\n  maidenName?: string;\n  nickname?: string;\n  birthDate?: string;\n  deathDate?: string;\n  branch?: 'core' | 'paternal' | 'maternal' | 'california' | 'louisiana' | 'extended';\n  generation?: number;\n  location?: string;\n  bio?: string;\n  photo?: string;\n  relationships?: Relationship[];\n}\n\nexport interface Relationship {\n  type: 'spouse' | 'partner' | 'child' | 'parent' | 'sibling' | 'raised' | 'raised-by' | 'step-parent' | 'step-child' | 'adopted' | 'adopted-by';\n  personId: string;\n  years?: string;\n}\n\nexport interface FamilyData {\n  people: Person[];\n}\n\n// Fetch all family data\nexport async function getFamilyData(): Promise<FamilyData> {\n  try {\n    const response = await fetch('/data/family.json');\n    if (!response.ok) {\n      throw new Error(`Failed to fetch family data: ${response.status}`);\n    }\n    const data = await response.json();\n    return data as FamilyData;\n  } catch (error) {\n    console.error('Error fetching family data:', error);\n    return { people: [] };\n  }\n}\n\n// Get a specific person by ID\nexport async function getPersonById(id: string): Promise<Person | null> {\n  try {\n    const data = await getFamilyData();\n    return data.people.find(person => person.id === id) || null;\n  } catch (error) {\n    console.error(`Error fetching person with ID ${id}:`, error);\n    return null;\n  }\n}\n\n// Get people by branch\nexport async function getPeopleByBranch(branch: string): Promise<Person[]> {\n  try {\n    const data = await getFamilyData();\n    return data.people.filter(person => person.branch === branch);\n  } catch (error) {\n    console.error(`Error fetching people from branch ${branch}:`, error);\n    return [];\n  }\n}\n\n// Get people by generation\nexport async function getPeopleByGeneration(generation: number): Promise<Person[]> {\n  try {\n    const data = await getFamilyData();\n    return data.people.filter(person => person.generation === generation);\n  } catch (error) {\n    console.error(`Error fetching people from generation ${generation}:`, error);\n    return [];\n  }\n}\n\n// Get all people\nexport async function getAllPeople(): Promise<Person[]> {\n  try {\n    const data = await getFamilyData();\n    return data.people;\n  } catch (error) {\n    console.error('Error fetching all people:', error);\n    return [];\n  }\n}\n\n// Get relationships for a person\nexport async function getRelationshipsForPerson(personId: string): Promise<{\n  person: Person | null;\n  relationships: Array<{ relationship: Relationship; person: Person }>;\n}> {\n  try {\n    const person = await getPersonById(personId);\n    if (!person || !person.relationships) {\n      return { person, relationships: [] };\n    }\n\n    const allPeople = await getAllPeople();\n    const relationships = person.relationships\n      .map(relationship => {\n        const relatedPerson = allPeople.find(p => p.id === relationship.personId);\n        if (!relatedPerson) return null;\n        return { relationship, person: relatedPerson };\n      })\n      .filter(Boolean) as Array<{ relationship: Relationship; person: Person }>;\n\n    return { person, relationships };\n  } catch (error) {\n    console.error(`Error fetching relationships for person ${personId}:`, error);\n    return { person: null, relationships: [] };\n  }\n}\n\n// Get extended family relationships\nexport async function getExtendedFamilyData(): Promise<Person[]> {\n  try {\n    const response = await fetch('/data/extended_family.json');\n    if (!response.ok) {\n      throw new Error(`Failed to fetch extended family data: ${response.status}`);\n    }\n    const data = await response.json();\n    return data.people || [];\n  } catch (error) {\n    console.error('Error fetching extended family data:', error);\n    return [];\n  }\n}\n\n// Get family tree data optimized for visualization\nexport async function getFamilyTreeData(rootPersonId: string): Promise<any> {\n  try {\n    const allPeople = await getAllPeople();\n    const extendedPeople = await getExtendedFamilyData();\n    \n    // Combine all people\n    const combinedPeople = [...allPeople, ...extendedPeople];\n    \n    // Find the root person\n    const rootPerson = combinedPeople.find(p => p.id === rootPersonId);\n    if (!rootPerson) {\n      throw new Error(`Root person with ID ${rootPersonId} not found`);\n    }\n    \n    // Create map for easy lookup\n    const peopleMap = new Map();\n    combinedPeople.forEach(person => peopleMap.set(person.id, person));\n    \n    // Process relationships to build tree structure\n    const buildTreeNode = (personId: string, depth = 0, visited = new Set<string>()) => {\n      // Prevent infinite recursion\n      if (depth > 5 || visited.has(personId)) return null;\n      \n      visited.add(personId);\n      const person = peopleMap.get(personId);\n      if (!person) return null;\n      \n      // Process children relationships\n      const children = [];\n      (person.relationships || []).forEach(rel => {\n        if (rel.type === 'child') {\n          const childNode = buildTreeNode(rel.personId, depth + 1, new Set(visited));\n          if (childNode) children.push(childNode);\n        }\n      });\n      \n      return {\n        id: person.id,\n        name: `${person.firstName} ${person.lastName}`,\n        data: person,\n        children: children.length > 0 ? children : undefined\n      };\n    };\n    \n    return buildTreeNode(rootPersonId);\n  } catch (error) {\n    console.error('Error creating family tree data:', error);\n    return null;\n  }\n}