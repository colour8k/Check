\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport PageLayout from '../../components/layout/PageLayout';\nimport FamilyTree from '../../components/visualizations/FamilyTree';\nimport PersonCard from '../../components/ui/PersonCard';\n\n// Types for our data\ninterface Person {\n  id: string;\n  firstName: string;\n  lastName: string;\n  middleName?: string;\n  maidenName?: string;\n  nickname?: string;\n  birthDate?: string;\n  deathDate?: string;\n  branch?: string;\n  generation?: number;\n  bio?: string;\n  photo?: string;\n  relationships?: Relationship[];\n}\n\ninterface Relationship {\n  type: string;\n  personId: string;\n  years?: string;\n}\n\nexport default function FamilyTreePage() {\n  const [familyData, setFamilyData] = useState<Person[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedPerson, setSelectedPerson] = useState<Person | null>(null);\n  const [rootPersonId, setRootPersonId] = useState('jeff-kerr'); // Default root person\n\n  // Fetch family data\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // In production, this would be fetched from an API endpoint\n        const response = await fetch('/data/family.json');\n        const data = await response.json();\n        \n        setFamilyData(data.people);\n        \n        // Set the selected person to the root person\n        const rootPerson = data.people.find((p: Person) => p.id === rootPersonId);\n        if (rootPerson) {\n          setSelectedPerson(rootPerson);\n        }\n        \n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching family data:', err);\n        setError('Failed to load family data. Please try again later.');\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [rootPersonId]);\n\n  // Handle person selection in the tree\n  const handlePersonSelect = (person: Person) => {\n    setSelectedPerson(person);\n  };\n  \n  // Handle changing the root person\n  const handleChangeRoot = (personId: string) => {\n    setRootPersonId(personId);\n  };\n\n  return (\n    <PageLayout>\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold mb-2\">Kerr Family Tree</h1>\n          <p className=\"text-slate-600\">\n            Explore the family connections across generations. Click on a person to see their details.\n          </p>\n        </div>\n        \n        {loading ? (\n          <div className=\"flex justify-center items-center h-96\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-slate-800\"></div>\n          </div>\n        ) : error ? (\n          <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative\" role=\"alert\">\n            <span className=\"block sm:inline\">{error}</span>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            <div className=\"lg:col-span-2 bg-white rounded-lg shadow\">\n              <div className=\"p-4 border-b\">\n                <div className=\"flex flex-wrap items-center justify-between gap-4\">\n                  <h2 className=\"text-xl font-semibold\">Family Relationships</h2>\n                  \n                  {/* Controls */}\n                  <div className=\"flex items-center space-x-4\">\n                    {selectedPerson && selectedPerson.id !== rootPersonId && (\n                      <button\n                        onClick={() => handleChangeRoot(selectedPerson.id)}\n                        className=\"bg-slate-700 text-white px-3 py-1 rounded text-sm hover:bg-slate-800 transition-colors\"\n                      >\n                        Set as Root\n                      </button>\n                    )}\n                    \n                    <button\n                      onClick={() => handleChangeRoot('jeff-kerr')}\n                      className=\"bg-slate-100 text-slate-700 px-3 py-1 rounded text-sm hover:bg-slate-200 transition-colors\"\n                    >\n                      Reset Tree\n                    </button>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Tree Visualization */}\n              <div className=\"p-4\">\n                <FamilyTree \n                  data={familyData}\n                  rootPersonId={rootPersonId}\n                  width={800}\n                  height={600}\n                  onPersonSelect={handlePersonSelect}\n                  className=\"w-full\"\n                />\n              </div>\n            </div>\n            \n            {/* Selected Person Details */}\n            <div className=\"bg-white rounded-lg shadow p-6\">\n              <h2 className=\"text-xl font-semibold mb-4\">Selected Person</h2>\n              \n              {selectedPerson ? (\n                <div>\n                  <PersonCard \n                    id={selectedPerson.id}\n                    firstName={selectedPerson.firstName}\n                    lastName={selectedPerson.lastName}\n                    middleName={selectedPerson.middleName}\n                    birthDate={selectedPerson.birthDate}\n                    deathDate={selectedPerson.deathDate}\n                    photo={selectedPerson.photo}\n                    bio={selectedPerson.bio}\n                    variant=\"detail\"\n                  />\n                  \n                  {/* Relationships */}\n                  {selectedPerson.relationships && selectedPerson.relationships.length > 0 && (\n                    <div className=\"mt-6\">\n                      <h3 className=\"text-lg font-medium mb-3\">Relationships</h3>\n                      <ul className=\"space-y-2\">\n                        {selectedPerson.relationships.map((rel, index) => {\n                          const relatedPerson = familyData.find(p => p.id === rel.personId);\n                          if (!relatedPerson) return null;\n                          \n                          return (\n                            <li key={index} className=\"flex items-center\">\n                              <span className=\"text-sm text-slate-500 w-24\">{rel.type}:</span>\n                              <button\n                                onClick={() => setSelectedPerson(relatedPerson)}\n                                className=\"text-blue-600 hover:text-blue-800 text-sm font-medium\"\n                              >\n                                {relatedPerson.firstName} {relatedPerson.lastName}\n                              </button>\n                            </li>\n                          );\n                        })}\n                      </ul>\n                    </div>\n                  )}\n                </div>\n              ) : (\n                <p className=\"text-slate-500\">Select a person from the family tree to view their details.</p>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    </PageLayout>\n  );\n}