'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport AppWrapper from '../../AppWrapper';\n\ninterface Person {\n  id: string;\n  firstName: string;\n  lastName: string;\n  middleName?: string;\n  maidenName?: string;\n  nickname?: string;\n  birthDate?: string;\n  deathDate?: string;\n  branch?: string;\n  generation?: number;\n  location?: string;\n  bio?: string;\n  photo?: string;\n  relationships?: Relationship[];\n}\n\ninterface Relationship {\n  type: string;\n  personId: string;\n  years?: string;\n}\n\ninterface RelatedPerson {\n  relationship: Relationship;\n  person: Person;\n}\n\nexport default function PersonPage({ params }: { params: { id: string } }) {\n  const personId = params.id;\n  \n  const [person, setPerson] = useState<Person | null>(null);\n  const [relatedPeople, setRelatedPeople] = useState<RelatedPerson[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Fetch person data\n  useEffect(() => {\n    const fetchPersonData = async () => {\n      try {\n        // Fetch family data\n        const response = await fetch('/data/family.json');\n        const data = await response.json();\n        \n        // Find the specific person\n        const foundPerson = data.people.find((p: Person) => p.id === personId);\n        if (!foundPerson) {\n          throw new Error('Person not found');\n        }\n        \n        setPerson(foundPerson);\n        \n        // Process relationships\n        if (foundPerson.relationships && foundPerson.relationships.length > 0) {\n          const related = foundPerson.relationships.map(relationship => {\n            const relatedPerson = data.people.find((p: Person) => p.id === relationship.personId);\n            if (relatedPerson) {\n              return { relationship, person: relatedPerson };\n            }\n            return null;\n          }).filter(Boolean) as RelatedPerson[];\n          \n          setRelatedPeople(related);\n        }\n        \n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching person data:', err);\n        setError('Failed to load person data. Please try again later.');\n        setLoading(false);\n      }\n    };\n\n    if (personId) {\n      fetchPersonData();\n    }\n  }, [personId]);\n\n  // Group relationships by type\n  const relationshipsByType = relatedPeople.reduce((groups, rel) => {\n    const type = rel.relationship.type;\n    if (!groups[type]) {\n      groups[type] = [];\n    }\n    groups[type].push(rel);\n    return groups;\n  }, {} as Record<string, RelatedPerson[]>);\n  \n  // Format relationship type for display\n  const formatRelationshipType = (type: string) => {\n    switch (type) {\n      case 'spouse': return 'Spouse';\n      case 'partner': return 'Partner';\n      case 'child': return 'Child of';\n      case 'parent': return 'Parent of';\n      case 'sibling': return 'Sibling of';\n      case 'raised': return 'Raised';\n      case 'raised-by': return 'Raised by';\n      case 'step-parent': return 'Step-parent of';\n      case 'step-child': return 'Step-child of';\n      case 'adopted': return 'Adopted';\n      case 'adopted-by': return 'Adopted by';\n      default: return type.charAt(0).toUpperCase() + type.slice(1);\n    }\n  };\n\n  return (\n    <AppWrapper>\n      <div className=\"container mx-auto px-4 py-8\">\n        {loading ? (\n          <div className=\"flex justify-center items-center h-64\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-slate-800\"></div>\n          </div>\n        ) : error || !person ? (\n          <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative\" role=\"alert\">\n            <span className=\"block sm:inline\">{error || 'Person not found'}</span>\n            <div className=\"mt-4\">\n              <Link href=\"/people\" className=\"text-red-700 font-medium hover:text-red-800\">\n                &larr; Back to People\n              </Link>\n            </div>\n          </div>\n        ) : (\n          <div>\n            {/* Navigation Breadcrumbs */}\n            <div className=\"mb-6\">\n              <nav className=\"flex\" aria-label=\"Breadcrumb\">\n                <ol className=\"inline-flex items-center space-x-1 md:space-x-3\">\n                  <li className=\"inline-flex items-center\">\n                    <Link href=\"/\" className=\"text-slate-600 hover:text-slate-900\">\n                      Home\n                    </Link>\n                  </li>\n                  <li>\n                    <div className=\"flex items-center\">\n                      <svg className=\"w-3 h-3 text-slate-400 mx-1\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 6 10\">\n                        <path stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"m1 9 4-4-4-4\"/>\n                      </svg>\n                      <Link href=\"/people\" className=\"text-slate-600 hover:text-slate-900 ml-1 md:ml-2\">\n                        People\n                      </Link>\n                    </div>\n                  </li>\n                  <li aria-current=\"page\">\n                    <div className=\"flex items-center\">\n                      <svg className=\"w-3 h-3 text-slate-400 mx-1\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 6 10\">\n                        <path stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"m1 9 4-4-4-4\"/>\n                      </svg>\n                      <span className=\"text-slate-500 ml-1 md:ml-2\">\n                        {person.firstName} {person.lastName}\n                      </span>\n                    </div>\n                  </li>\n                </ol>\n              </nav>\n            </div>\n            \n            {/* Person Profile */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n              {/* Main Content */}\n              <div className=\"lg:col-span-2\">\n                <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n                  {/* Header with photo */}\n                  <div className=\"relative h-64 bg-slate-200\">\n                    {person.photo ? (\n                      <Image \n                        src={person.photo} \n                        alt={`${person.firstName} ${person.lastName}`}\n                        fill\n                        className=\"object-cover\"\n                      />\n                    ) : (\n                      <div className=\"h-full flex items-center justify-center\">\n                        <div className=\"text-5xl font-bold text-slate-400\">\n                          {person.firstName.charAt(0)}{person.lastName.charAt(0)}\n                        </div>\n                      </div>\n                    )}\n                    \n                    {/* Branch badge */}\n                    {person.branch && (\n                      <div className=\"absolute top-4 right-4 bg-opacity-90 bg-white px-3 py-1 rounded-full text-sm font-medium\">\n                        {person.branch.charAt(0).toUpperCase() + person.branch.slice(1)} Branch\n                      </div>\n                    )}\n                  </div>\n                  \n                  {/* Content */}\n                  <div className=\"p-6\">\n                    <h1 className=\"text-3xl font-bold mb-1\">\n                      {person.firstName}{' '}\n                      {person.middleName ? `${person.middleName} ` : ''}\n                      {person.lastName}\n                      {person.maidenName ? ` (n√©e ${person.maidenName})` : ''}\n                    </h1>\n                    \n                    {person.nickname && (\n                      <p className=\"text-slate-600 mb-3\">\n                        Known as \"{person.nickname}\"\n                      </p>\n                    )}\n                    \n                    <div className=\"flex flex-wrap gap-y-2 gap-x-4 mb-6\">\n                      {person.birthDate && (\n                        <div className=\"flex items-center\">\n                          <svg className=\"w-5 h-5 text-slate-500 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\" />\n                          </svg>\n                          <span className=\"text-slate-700\">Born: {person.birthDate}</span>\n                        </div>\n                      )}\n                      \n                      {person.deathDate && (\n                        <div className=\"flex items-center\">\n                          <svg className=\"w-5 h-5 text-slate-500 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\n                          </svg>\n                          <span className=\"text-slate-700\">Died: {person.deathDate}</span>\n                        </div>\n                      )}\n                      \n                      {person.location && (\n                        <div className=\"flex items-center\">\n                          <svg className=\"w-5 h-5 text-slate-500 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\" />\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\" />\n                          </svg>\n                          <span className=\"text-slate-700\">{person.location}</span>\n                        </div>\n                      )}\n                      \n                      {person.generation && (\n                        <div className=\"flex items-center\">\n                          <svg className=\"w-5 h-5 text-slate-500 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\n                          </svg>\n                          <span className=\"text-slate-700\">Generation {person.generation}</span>\n                        </div>\n                      )}\n                    </div>\n                    \n                    {/* Biography */}\n                    <div className=\"mb-8\">\n                      <h2 className=\"text-xl font-semibold mb-3\">Biography</h2>\n                      <div className=\"prose max-w-none\">\n                        {person.bio ? (\n                          <p>{person.bio}</p>\n                        ) : (\n                          <p className=\"text-slate-500 italic\">No biographical information available.</p>\n                        )}\n                      </div>\n                    </div>\n                    \n                    {/* Family Tree Link */}\n                    <div>\n                      <Link \n                        href={`/family-tree?root=${person.id}`}\n                        className=\"inline-flex items-center text-blue-600 hover:text-blue-800\"\n                      >\n                        <svg className=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\" />\n                        </svg>\n                        View in Family Tree\n                      </Link>\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Timeline */}\n                <div className=\"mt-8 bg-white rounded-lg shadow p-6\">\n                  <h2 className=\"text-xl font-semibold mb-6\">Timeline</h2>\n                  \n                  <div className=\"ml-4\">\n                    {person.birthDate && (\n                      <div className=\"timeline-item\">\n                        <div className=\"mb-1 text-lg font-semibold\">{person.birthDate} - Birth</div>\n                        <p className=\"text-slate-600\">\n                          {person.firstName} {person.lastName} was born.\n                        </p>\n                      </div>\n                    )}\n                    \n                    {/* We would add more timeline items based on life events */}\n                    {/* This is a placeholder for future timeline events */}\n                    <div className=\"timeline-item\">\n                      <div className=\"mb-1 text-lg font-semibold\">Family Events</div>\n                      <p className=\"text-slate-600\">\n                        Additional life events and milestones would be displayed here as part of the timeline.\n                      </p>\n                    </div>\n                    \n                    {person.deathDate && (\n                      <div className=\"timeline-item\">\n                        <div className=\"mb-1 text-lg font-semibold\">{person.deathDate} - Death</div>\n                        <p className=\"text-slate-600\">\n                          {person.firstName} {person.lastName} passed away.\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n              \n              {/* Sidebar */}\n              <div>\n                {/* Relationships */}\n                <div className=\"bg-white rounded-lg shadow p-6 mb-6\">\n                  <h2 className=\"text-xl font-semibold mb-4\">Relationships</h2>\n                  \n                  {Object.keys(relationshipsByType).length > 0 ? (\n                    <div className=\"space-y-6\">\n                      {Object.entries(relationshipsByType).map(([type, relations]) => (\n                        <div key={type}>\n                          <h3 className=\"text-lg font-medium mb-3\">{formatRelationshipType(type)}</h3>\n                          <ul className=\"space-y-3\">\n                            {relations.map((rel, index) => (\n                              <li key={index} className=\"flex items-center\">\n                                <Link href={`/people/${rel.person.id}`} className=\"flex items-center hover:text-blue-700\">\n                                  {rel.person.photo ? (\n                                    <div className=\"w-8 h-8 rounded-full overflow-hidden mr-2\">\n                                      <Image \n                                        src={rel.person.photo} \n                                        alt={`${rel.person.firstName} ${rel.person.lastName}`}\n                                        width={32}\n                                        height={32}\n                                        className=\"object-cover\"\n                                      />\n                                    </div>\n                                  ) : (\n                                    <div className=\"w-8 h-8 rounded-full bg-slate-200 flex items-center justify-center mr-2\">\n                                      <span className=\"text-xs font-medium\">\n                                        {rel.person.firstName.charAt(0)}{rel.person.lastName.charAt(0)}\n                                      </span>\n                                    </div>\n                                  )}\n                                  <span>\n                                    {rel.person.firstName} {rel.person.lastName}\n                                    {rel.relationship.years && (\n                                      <span className=\"text-sm text-slate-500 ml-1\">\n                                        ({rel.relationship.years})\n                                      </span>\n                                    )}\n                                  </span>\n                                </Link>\n                              </li>\n                            ))}\n                          </ul>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <p className=\"text-slate-500 italic\">No relationship information available.</p>\n                  )}\n                </div>\n                \n                {/* Branch Information */}\n                {person.branch && (\n                  <div className=\"bg-white rounded-lg shadow p-6\">\n                    <h2 className=\"text-xl font-semibold mb-4\">Branch Information</h2>\n                    <div className=\"prose max-w-none\">\n                      {person.branch === 'paternal' && (\n                        <p>The paternal line represents the Kerr family heritage through the father's side. This branch connects to the family's origins and historical roots.</p>\n                      )}\n                      {person.branch === 'maternal' && (\n                        <p>The maternal line represents the Mowry and Lowe family connections that join the Kerr family through marriage. This branch brings its own rich history and traditions.</p>\n                      )}\n                      {person.branch === 'core' && (\n                        <p>The core family represents the central focus of the Kerr family genealogy project, including the most recent generations and direct descendants.</p>\n                      )}\n                      {person.branch === 'california' && (\n                        <p>The California branch represents family members who migrated to and established roots in California, expanding the family's geographic presence.</p>\n                      )}\n                      {person.branch === 'louisiana' && (\n                        <p>The Louisiana branch represents family members who settled in Louisiana, bringing the Kerr family heritage to the southern United States.</p>\n                      )}\n                      {person.branch === 'extended' && (\n                        <p>The extended family includes connections through marriage, partnerships, and other significant relationships that expand the Kerr family network beyond direct blood relations.</p>\n                      )}\n                    </div>\n                    <div className=\"mt-4\">\n                      <Link \n                        href={`/people?filter=${person.branch}`}\n                        className=\"text-blue-600 hover:text-blue-800 font-medium\"\n                      >\n                        View All {person.branch.charAt(0).toUpperCase() + person.branch.slice(1)} Family Members\n                      </Link>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </AppWrapper>\n  );\n}